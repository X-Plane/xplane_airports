from unittest import TestCase
from xplane_airports.AptDat import TaxiRouteEdge, TaxiRouteNode, TaxiRouteNetwork, AptDatLine, IcaoWidth


class TestTaxiRouteNetwork(TestCase):
    kirk = """
            I
            1100 Generated by WorldEditor 1.7.1r2
            
            1    966 0 0 KIRK Kirksville Regl
            1302 city Kirksville
            1302 country United States
            1302 flatten 1
            100 30.48 2 0 0.25 0 3 0 18  40.10073250 -092.54419888    0    0 2 0 0 1 36  40.08424950 -092.54438310    0    0 3 8 0 0
            100 30.48 3 0 0.25 0 0 0 09  40.09780600 -092.55008100    0    0 1 0 0 0 27  40.09775800 -092.54518300    0    0 1 0 0 0
            110 2 0.25 180.5000 concrete_3L.pol
            18  40.09496816 -092.53993720 1 BCN
            50 12112 ASOS
            51 12280 CTAF/UNICOM
            1200 
            1201  40.09327824 -092.54122558 both 0 _stop
            1201  40.09366288 -092.54106308 both 1 _stop
            1201  40.09365747 -092.54127264 both 2 _stop
            1201  40.09138371 -092.54140038 both 3 _stop
            1201  40.09255756 -092.54139012 both 4 _stop
            1201  40.09271512 -092.54142660 both 5 _stop
            1201  40.09339541 -092.54146907 both 6 _stop
            1201  40.09325697 -092.54146105 both 7 _stop
            1201  40.09339537 -092.54157087 both 8 B_stop
            1201  40.08874489 -092.54346016 both 9 D_stop
            1201  40.09340722 -092.54340893 both 10 B_stop
            1201  40.08430072 -092.54315892 both 11 A_stop
            1201  40.08430401 -092.54351311 both 12 A_stop
            1201  40.08444182 -092.54296260 both 13 A_stop
            1201  40.10054222 -092.54278377 both 14 A_stop
            1201  40.09340316 -092.54286347 both 15 A_stop
            1201  40.09139450 -092.54288581 both 16 A_stop
            1201  40.10067637 -092.54295607 both 17 A_stop
            1201  40.09775838 -092.54521328 both 18 _stop
            1201  40.09780851 -092.55004665 both 19 _start
            1201  40.10068352 -092.54419931 both 20 _stop
            1201  40.10067918 -092.54332575 both 21 _stop
            1201  40.08431024 -092.54438361 both 22 _start
            1201  40.08875066 -092.54433417 both 23 _start
            1201  40.09341282 -092.54428123 both 24 _start
            1201  40.09726600 -092.54424040 both 25 _start
            1201  40.09774359 -092.54423251 both 26 _start
            1201  40.09824897 -092.54423552 both 27 _start
            1202 3 16 twoway taxiway_A 
            1202 7 0 oneway taxiway_B 
            1202 1 2 oneway taxiway_B 
            1202 2 6 oneway taxiway_B 
            1202 4 3 twoway taxiway_A 
            1202 5 4 twoway taxiway_A 
            1202 6 7 twoway taxiway_A 
            1202 7 5 twoway taxiway_A 
            1202 8 6 twoway taxiway_B 
            1202 15 8 twoway taxiway_B B
            1202 10 15 twoway taxiway_B B
            1202 23 9 twoway taxiway_B D
            1204 departure 18,36
            1204 arrival 18,36
            1202 24 10 twoway taxiway_B B
            1204 departure 18,36
            1204 arrival 18,36
            1202 11 12 twoway taxiway_B A
            1202 12 22 twoway taxiway_B A
            1204 departure 18,36
            1204 arrival 18,36
            1202 13 11 twoway taxiway_B A
            1202 14 15 twoway taxiway_B A
            1202 15 16 twoway taxiway_B A
            1202 16 13 twoway taxiway_B A
            1202 17 14 twoway taxiway_B A
            1202 20 21 twoway taxiway_B A
            1204 departure 18,36
            1204 arrival 18,36
            1202 21 17 twoway taxiway_B A
            1202 18 26 twoway taxiway_A 
            1204 departure 09,18,27,36
            1204 arrival 09,18,27,36
            1202 19 18 twoway runway 09/27
            1204 departure 09,27
            1204 arrival 09,27
            1204 ils 09,27
            1202 22 23 twoway runway 18/36
            1204 departure 18,36
            1204 arrival 18,36
            1204 ils 18,36
            1202 23 24 twoway runway 18/36
            1204 departure 18,36
            1204 arrival 18,36
            1204 ils 18,36
            1202 24 25 twoway runway 18/36
            1204 departure 18,36
            1204 arrival 18,36
            1204 ils 18,36
            1202 25 26 twoway runway 18/36
            1204 departure 09,18,27,36
            1204 arrival 09,18,27,36
            1204 ils 18,36
            1202 26 27 twoway runway 18/36
            1204 departure 09,18,27,36
            1204 arrival 09,18,27,36
            1204 ils 18,36
            1202 27 20 twoway runway 18/36
            1204 departure 18,36
            1204 arrival 18,36
            1204 ils 18,36
            99
            """
    kirk_lines = [AptDatLine(line) for line in kirk.splitlines()]
    network = TaxiRouteNetwork.from_lines(kirk_lines)

    def test_nodes(self):
        nodes = self.network.nodes
        self.assertEqual(len(nodes), 28)
        for node in (TaxiRouteNode(id=0, lat=40.09327824, lon=-92.54122558),
                     TaxiRouteNode(id=13, lat=40.08444182, lon=-92.54296260),
                     TaxiRouteNode(id=27, lat=40.09824897, lon=-92.54423552)):
            self.assertTrue(node.id in nodes)
            self.assertEqual(nodes[node.id].id, node.id)
            self.assertAlmostEqual(nodes[node.id].lon, node.lon, 8)
            self.assertAlmostEqual(nodes[node.id].lat, node.lat, 8)


    def test_edges(self):
        nodes = self.network.nodes
        edges = self.network.edges
        self.assertEqual(len(edges), 30)
        self.assertTrue(all(edge.node_begin in nodes for edge in edges), "Missing begin node referenced by edge")
        self.assertTrue(all(edge.node_end in nodes for edge in edges), "Missing end node referenced by edge")

        test_edges = (TaxiRouteEdge(node_begin=3, node_end=16, name="", is_runway=False, one_way=False, icao_width=IcaoWidth.A),
                      TaxiRouteEdge(node_begin=7, node_end=0, name="", is_runway=False, one_way=True, icao_width=IcaoWidth.B),
                      TaxiRouteEdge(node_begin=15, node_end=8, name="B", is_runway=False, one_way=False, icao_width=IcaoWidth.B),
                      TaxiRouteEdge(node_begin=23, node_end=9, name="D", is_runway=False, one_way=False, icao_width=IcaoWidth.B),
                      TaxiRouteEdge(node_begin=26, node_end=27, name="18/36", is_runway=True, one_way=False, icao_width=None))
        self.assertTrue(all(edge in edges
                            for edge in test_edges))
